name: Build and Deploy Snowmapper Tajikistan

env:
  IMAGE_NAME_DASHBOARD: mabesa/taj-snowmapper-dashboard
  IMAGE_NAME_BACKEND: mabesa/taj-snowmapper-backend
  IMAGE_TAG: latest

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build_and_push_backend:
    runs-on: ubuntu-latest
    name: Build and push backend (data processor) for Snowmapper Tajikistan image

    steps:
      # Checkout the repository
      - name: Checkout
        uses: actions/checkout@v4

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Log in to DockerHub
      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Build and push Docker image
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./processing/Dockerfile
          push: true
          tags: ${{ env.IMAGE_NAME_BACKEND }}:${{ env.IMAGE_TAG }}
          cache-from: type=registry,ref=${{ env.IMAGE_NAME_BACKEND }}:buildcache
          cache-to: type=registry,ref=${{ env.IMAGE_NAME_BACKEND }}:buildcache,mode=max

  build_and_push_dashboard:
    runs-on: ubuntu-latest
    name: Build and push dashboard for Snowmapper Tajikistan image

    env:
      DASHBOARD_ENV: aws
      PORT: 5006

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Log in to DockerHub
      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Build and push Docker image
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./dashboard/Dockerfile
          push: true
          tags: ${{ env.IMAGE_NAME_DASHBOARD }}:${{ env.IMAGE_TAG }}
          cache-from: type=registry,ref=${{ env.IMAGE_NAME_DASHBOARD }}:buildcache
          cache-to: type=registry,ref=${{ env.IMAGE_NAME_DASHBOARD }}:buildcache,mode=max